// Generated by CoffeeScript 1.3.3
var IndexCtrl, NavCtrl, SquareCtrl;

IndexCtrl = function($scope, $http, $window, PostModel) {
  var getPage,
    _this = this;
  $scope.content = [];
  $scope.loadingDisabled = false;
  console.log(PostModel);
  getPage = function(pageNum) {
    return PostModel.query(pageNum, function(data) {
      var _this = this;
      $scope.content = $scope.content.concat(data);
      return setTimeout(function() {
        $scope.loadingDisabled = false;
        return console.log('Done loading.');
      }, 600);
    });
  };
  $scope.loadingDisabled = true;
  if ($scope.content != null) {
    getPage();
  }
  $window.$(function() {
    console.log('scroller injected');
    $(window).scroll(function() {
      return _this.didScroll = true;
    });
    return setInterval(function() {
      if (_this.didScroll && $(window).scrollTop() > $(document).height() - $(window).height() * 1.2 && !$scope.loadingDisabled) {
        console.log('Bottom reached');
        _this.didScroll = false;
        $scope.loadingDisabled = true;
        return getPage();
      }
    }, 200);
  });
  $scope.$on('search', function(event, query) {
    if (query !== '') {
      $scope.tempContent = $scope.content;
      PostModel.search(query, function(data) {
        return $scope.content = data;
      });
      return $scope.loadingDisabled = true;
    } else {
      $scope.content = $scope.tempContent;
      return $scope.loadingDisabled = false;
    }
  });
  $scope.$on('$viewContentLoaded', function(event) {
    return console.log('view loaded');
  });
  return $scope.$on('categoryFilter', function(event, cat) {
    if (cat) {
      return $scope.category = {
        'category': cat
      };
    } else {
      return $scope.category = null;
    }
  });
};

IndexCtrl.$inject = ["$scope", "$http", "$window", "PostModel"];

SquareCtrl = function($scope) {
  return false;
};

NavCtrl = function($scope, $http) {
  var categories;
  categories = [];
  return $scope.categories = categories;
};
